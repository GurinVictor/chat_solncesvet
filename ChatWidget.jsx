import React, { useState, useEffect, useRef } from "react";
import axios from "axios";

export default function ChatWidget() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef(null);

  const webhookUrl = "https://guru-ai.online/webhook/d55b53fc-6750-4521-a02a-2949eac00dc9/chat";

  // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º sessionId
  const getOrCreateSessionId = () => {
    const existing = localStorage.getItem("sessionId");
    if (existing) return existing;
    const newId = crypto.randomUUID();
    localStorage.setItem("sessionId", newId);
    return newId;
  };
  const sessionId = getOrCreateSessionId();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    const savedMessages = localStorage.getItem("chatMessages");
    if (savedMessages) {
      setMessages(JSON.parse(savedMessages));
    } else {
      // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      setMessages([
        {
          sender: "bot",
          text: `–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫—É—Ä—Å.\n\nüü° –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n‚Äì –ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ (—É—á–∏—Ç–µ–ª—å, –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å, –ª–æ–≥–æ–ø–µ–¥ –∏ —Ç.–¥.)\n‚Äì –ò –ø–æ –∫–∞–∫–æ–π —Ç–µ–º–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –§–ì–û–°, –û–í–ó, –ò–ö–¢, –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞...)\n\n–Ø —Å—Ä–∞–∑—É –ø–æ–¥–±–µ—Ä—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã üìã`
        }
      ]);
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    localStorage.setItem("chatMessages", JSON.stringify(messages));
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages, isTyping]);

  const sendMessage = async () => {
    if (!input.trim()) return;

    const newUserMessage = { sender: "user", text: input };
    setMessages((prev) => [...prev, newUserMessage]);
    setInput("");
    setIsTyping(true);

    try {
      const res = await axios.post(webhookUrl, {
        chatInput: input,
        sessionId: sessionId
      });

      console.log("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", res.data);

      let botReply = "–°–ø–∞—Å–∏–±–æ! –Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å.";

      if (Array.isArray(res.data) && res.data[0]?.output) {
        botReply = res.data[0].output;
      } else if (typeof res.data === "object" && res.data.output) {
        botReply = res.data.output;
      } else if (typeof res.data === "string") {
        try {
          const parsed = JSON.parse(res.data);
          if (Array.isArray(parsed) && parsed[0]?.output) {
            botReply = parsed[0].output;
          } else if (parsed.output) {
            botReply = parsed.output;
          }
        } catch (e) {
          console.warn("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏:", e);
        }
      }

      setMessages((prev) => [...prev, { sender: "bot", text: botReply }]);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      setMessages((prev) => [...prev, { sender: "bot", text: "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º." }]);
    } finally {
      setIsTyping(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  return (
    <div className="max-w-xl mx-auto p-4 bg-[#FFF6E4] rounded-xl shadow-md h-[90vh] flex flex-col">
      <h2 className="text-xl font-bold text-white bg-[#F6A400] p-3 rounded-md">–ü–æ–¥–±–æ—Ä –∫—É—Ä—Å–∞ –∑–∞ 2 –º–∏–Ω—É—Ç—ã</h2>
      <div className="flex-1 overflow-y-auto mt-3 mb-2 space-y-2 px-2">
        {messages.map((msg, i) => (
          <div
            key={i}
            className={`flex ${msg.sender === "user" ? "justify-end" : "justify-start"}`}
          >
            <div
              className={
                "max-w-[80%] p-3 rounded-lg whitespace-pre-line text-sm leading-snug " +
                (msg.sender === "user"
                  ? "bg-white text-black border border-gray-200"
                  : "bg-[#FFF2C8] text-black border border-gray-300")
              }
            >
              {msg.text}
            </div>
          </div>
        ))}
        {isTyping && (
          <div className="text-xs italic text-gray-500 px-2">–í–∏–∫—Ç–æ—Ä–∏—è –ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶</div>
        )}
        <div ref={messagesEndRef} />
      </div>
      <div className="flex items-center gap-2">
        <textarea
          rows={2}
          className="flex-1 p-2 rounded border border-gray-300 text-sm resize-none"
          placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyPress={handleKeyPress}
        />
        <button
          onClick={sendMessage}
          className="bg-[#F6A400] text-white px-4 py-2 rounded hover:opacity-90"
        >
          ‚û§
        </button>
      </div>
    </div>
  );
}
